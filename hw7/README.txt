My approach to this homework was to first implement the abstract account class, since that layed out the framework for how everything else was going to work. After I completed the custom exception constructor so i could work on deposit/withdraw, where i was able to implement how to add/remove money from a users account while also checking if they were able to withdraw a certain amount of money. Then I completed the generic bank class to implement methods addaccount and getaccount, so i could use those to implement the run in transaction class to account for each case of a transaction we could have, deposit, deadlock, withdraw, etc. I then implemented transfer by calling my deposit and withdraw functions, and implemented deadlock and racecondition calling my transfer function. Lastly I parsed the data for both loading the accounts and the transactions and created threads to execute each line in the transaction file. However, after I did this i had to go back and edit my transfer function to allow my deadlock condition to function properly, by choosing which account to lock first and making sure to always use synchronization and a consistent ordering of locks.